// Generated from Repository.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from '../../base/vendor/antlr4.js';


const serializedATN = [4,0,27,295,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,1,3,
1,115,8,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,4,4,128,8,4,11,4,12,
4,129,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,
25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,
1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,
53,1,53,0,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,53,27,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,
77,0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,
105,0,107,0,1,0,28,3,0,10,10,13,13,32,32,1,0,65,90,2,0,65,65,97,97,2,0,66,
66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,
102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,
106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,
110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,
114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,
118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,
122,269,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,109,1,0,
0,0,3,114,1,0,0,0,5,120,1,0,0,0,7,124,1,0,0,0,9,127,1,0,0,0,11,131,1,0,0,
0,13,133,1,0,0,0,15,136,1,0,0,0,17,140,1,0,0,0,19,147,1,0,0,0,21,152,1,0,
0,0,23,160,1,0,0,0,25,165,1,0,0,0,27,173,1,0,0,0,29,180,1,0,0,0,31,183,1,
0,0,0,33,188,1,0,0,0,35,193,1,0,0,0,37,199,1,0,0,0,39,204,1,0,0,0,41,207,
1,0,0,0,43,214,1,0,0,0,45,221,1,0,0,0,47,225,1,0,0,0,49,229,1,0,0,0,51,234,
1,0,0,0,53,238,1,0,0,0,55,241,1,0,0,0,57,243,1,0,0,0,59,245,1,0,0,0,61,247,
1,0,0,0,63,249,1,0,0,0,65,251,1,0,0,0,67,253,1,0,0,0,69,255,1,0,0,0,71,257,
1,0,0,0,73,259,1,0,0,0,75,261,1,0,0,0,77,263,1,0,0,0,79,265,1,0,0,0,81,267,
1,0,0,0,83,269,1,0,0,0,85,271,1,0,0,0,87,273,1,0,0,0,89,275,1,0,0,0,91,277,
1,0,0,0,93,279,1,0,0,0,95,281,1,0,0,0,97,283,1,0,0,0,99,285,1,0,0,0,101,
287,1,0,0,0,103,289,1,0,0,0,105,291,1,0,0,0,107,293,1,0,0,0,109,110,7,0,
0,0,110,111,1,0,0,0,111,112,6,0,0,0,112,2,1,0,0,0,113,115,5,13,0,0,114,113,
1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,117,5,10,0,0,117,118,1,0,0,0,
118,119,6,1,0,0,119,4,1,0,0,0,120,121,5,95,0,0,121,122,1,0,0,0,122,123,6,
2,0,0,123,6,1,0,0,0,124,125,7,1,0,0,125,8,1,0,0,0,126,128,3,55,27,0,127,
126,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,10,1,0,0,
0,131,132,9,0,0,0,132,12,1,0,0,0,133,134,3,73,36,0,134,135,3,93,46,0,135,
14,1,0,0,0,136,137,3,83,41,0,137,138,3,85,42,0,138,139,3,95,47,0,139,16,
1,0,0,0,140,141,3,65,32,0,141,142,3,89,44,0,142,143,3,97,48,0,143,144,3,
57,28,0,144,145,3,79,39,0,145,146,3,93,46,0,146,18,1,0,0,0,147,148,3,79,
39,0,148,149,3,73,36,0,149,150,3,77,38,0,150,151,3,65,32,0,151,20,1,0,0,
0,152,153,3,69,34,0,153,154,3,91,45,0,154,155,3,65,32,0,155,156,3,57,28,
0,156,157,3,95,47,0,157,158,3,65,32,0,158,159,3,91,45,0,159,22,1,0,0,0,160,
161,3,79,39,0,161,162,3,65,32,0,162,163,3,93,46,0,163,164,3,93,46,0,164,
24,1,0,0,0,165,166,3,59,29,0,166,167,3,65,32,0,167,168,3,95,47,0,168,169,
3,101,50,0,169,170,3,65,32,0,170,171,3,65,32,0,171,172,3,83,41,0,172,26,
1,0,0,0,173,174,3,95,47,0,174,175,3,71,35,0,175,176,3,57,28,0,176,177,3,
83,41,0,177,178,1,0,0,0,178,179,6,13,0,0,179,28,1,0,0,0,180,181,3,73,36,
0,181,182,3,83,41,0,182,30,1,0,0,0,183,184,3,83,41,0,184,185,3,97,48,0,185,
186,3,79,39,0,186,187,3,79,39,0,187,32,1,0,0,0,188,189,3,95,47,0,189,190,
3,91,45,0,190,191,3,97,48,0,191,192,3,65,32,0,192,34,1,0,0,0,193,194,3,67,
33,0,194,195,3,57,28,0,195,196,3,79,39,0,196,197,3,93,46,0,197,198,3,65,
32,0,198,36,1,0,0,0,199,200,3,67,33,0,200,201,3,73,36,0,201,202,3,83,41,
0,202,203,3,63,31,0,203,38,1,0,0,0,204,205,3,59,29,0,205,206,3,105,52,0,
206,40,1,0,0,0,207,208,3,97,48,0,208,209,3,87,43,0,209,210,3,63,31,0,210,
211,3,57,28,0,211,212,3,95,47,0,212,213,3,65,32,0,213,42,1,0,0,0,214,215,
3,63,31,0,215,216,3,65,32,0,216,217,3,79,39,0,217,218,3,65,32,0,218,219,
3,95,47,0,219,220,3,65,32,0,220,44,1,0,0,0,221,222,3,85,42,0,222,223,3,83,
41,0,223,224,3,65,32,0,224,46,1,0,0,0,225,226,3,95,47,0,226,227,3,85,42,
0,227,228,3,87,43,0,228,48,1,0,0,0,229,230,3,93,46,0,230,231,3,77,38,0,231,
232,3,73,36,0,232,233,3,87,43,0,233,50,1,0,0,0,234,235,3,57,28,0,235,236,
3,83,41,0,236,237,3,63,31,0,237,52,1,0,0,0,238,239,3,85,42,0,239,240,3,91,
45,0,240,54,1,0,0,0,241,242,2,48,57,0,242,56,1,0,0,0,243,244,7,2,0,0,244,
58,1,0,0,0,245,246,7,3,0,0,246,60,1,0,0,0,247,248,7,4,0,0,248,62,1,0,0,0,
249,250,7,5,0,0,250,64,1,0,0,0,251,252,7,6,0,0,252,66,1,0,0,0,253,254,7,
7,0,0,254,68,1,0,0,0,255,256,7,8,0,0,256,70,1,0,0,0,257,258,7,9,0,0,258,
72,1,0,0,0,259,260,7,10,0,0,260,74,1,0,0,0,261,262,7,11,0,0,262,76,1,0,0,
0,263,264,7,12,0,0,264,78,1,0,0,0,265,266,7,13,0,0,266,80,1,0,0,0,267,268,
7,14,0,0,268,82,1,0,0,0,269,270,7,15,0,0,270,84,1,0,0,0,271,272,7,16,0,0,
272,86,1,0,0,0,273,274,7,17,0,0,274,88,1,0,0,0,275,276,7,18,0,0,276,90,1,
0,0,0,277,278,7,19,0,0,278,92,1,0,0,0,279,280,7,20,0,0,280,94,1,0,0,0,281,
282,7,21,0,0,282,96,1,0,0,0,283,284,7,22,0,0,284,98,1,0,0,0,285,286,7,23,
0,0,286,100,1,0,0,0,287,288,7,24,0,0,288,102,1,0,0,0,289,290,7,25,0,0,290,
104,1,0,0,0,291,292,7,26,0,0,292,106,1,0,0,0,293,294,7,27,0,0,294,108,1,
0,0,0,3,0,114,129,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class RepositoryLexer extends antlr4.Lexer {

    static grammarFileName = "Repository.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, "'_'" ];
	static symbolicNames = [ null, "WS", "LINE_BREAK", "UNDER_SCORE", "UPPER_CHAR", 
                          "NUMBER", "CHAR", "IS", "NOT", "EQUALS", "LIKE", 
                          "GREATER", "LESS", "BETWEEN", "THAN", "IN", "NULL", 
                          "TRUE", "FALSE", "FIND", "BY", "UPDATE", "DELETE", 
                          "ONE", "TOP", "K_SKIP", "AND", "OR" ];
	static ruleNames = [ "WS", "LINE_BREAK", "UNDER_SCORE", "UPPER_CHAR", "NUMBER", 
                      "CHAR", "IS", "NOT", "EQUALS", "LIKE", "GREATER", 
                      "LESS", "BETWEEN", "THAN", "IN", "NULL", "TRUE", "FALSE", 
                      "FIND", "BY", "UPDATE", "DELETE", "ONE", "TOP", "K_SKIP", 
                      "AND", "OR", "DIGIT", "A", "B", "C", "D", "E", "F", 
                      "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", 
                      "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

RepositoryLexer.EOF = antlr4.Token.EOF;
RepositoryLexer.WS = 1;
RepositoryLexer.LINE_BREAK = 2;
RepositoryLexer.UNDER_SCORE = 3;
RepositoryLexer.UPPER_CHAR = 4;
RepositoryLexer.NUMBER = 5;
RepositoryLexer.CHAR = 6;
RepositoryLexer.IS = 7;
RepositoryLexer.NOT = 8;
RepositoryLexer.EQUALS = 9;
RepositoryLexer.LIKE = 10;
RepositoryLexer.GREATER = 11;
RepositoryLexer.LESS = 12;
RepositoryLexer.BETWEEN = 13;
RepositoryLexer.THAN = 14;
RepositoryLexer.IN = 15;
RepositoryLexer.NULL = 16;
RepositoryLexer.TRUE = 17;
RepositoryLexer.FALSE = 18;
RepositoryLexer.FIND = 19;
RepositoryLexer.BY = 20;
RepositoryLexer.UPDATE = 21;
RepositoryLexer.DELETE = 22;
RepositoryLexer.ONE = 23;
RepositoryLexer.TOP = 24;
RepositoryLexer.K_SKIP = 25;
RepositoryLexer.AND = 26;
RepositoryLexer.OR = 27;



